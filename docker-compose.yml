# FinBrief Financial News Crawler - Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: finbrief-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-finbrief_prod}
      POSTGRES_USER: ${POSTGRES_USER:-finbrief}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-finbrief_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-finbrief}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - finbrief-network

  # Redis (Optional - for caching and background tasks)
  redis:
    image: redis:7-alpine
    container_name: finbrief-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - finbrief-network
    profiles:
      - redis

  # FinBrief API Server
  finbrief-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT:-production}
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    container_name: finbrief-api
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URI=postgresql://${POSTGRES_USER:-finbrief}:${POSTGRES_PASSWORD:-finbrief_password}@postgres:5432/${POSTGRES_DB:-finbrief_prod}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379/0
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=${API_WORKERS:-2}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_DIR=/app/logs
      - METRICS_RETENTION_HOURS=${METRICS_RETENTION_HOURS:-72}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - app_logs:/app/logs
      - vector_data:/app/data/vectors
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/monitoring/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - finbrief-network
    command: ["server"]

  # FinBrief News Crawler (Scheduler)
  finbrief-crawler:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT:-production}
    container_name: finbrief-crawler
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URI=postgresql://${POSTGRES_USER:-finbrief}:${POSTGRES_PASSWORD:-finbrief_password}@postgres:5432/${POSTGRES_DB:-finbrief_prod}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379/0
      - ENABLE_SCHEDULER=${ENABLE_SCHEDULER:-true}
      - PIPELINE_INTERVAL_MINUTES=${PIPELINE_INTERVAL_MINUTES:-30}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_DIR=/app/logs
    volumes:
      - crawler_logs:/app/logs
      - vector_data:/app/data/vectors
    depends_on:
      postgres:
        condition: service_healthy
      finbrief-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "from src.monitoring.health import check_system_health; import asyncio; asyncio.run(check_system_health())"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - finbrief-network
    command: ["crawler"]

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:1.25-alpine
    container_name: finbrief-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - finbrief-api
    restart: unless-stopped
    networks:
      - finbrief-network
    profiles:
      - nginx

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: finbrief-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - finbrief-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: finbrief-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - finbrief-network
    profiles:
      - monitoring

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  crawler_logs:
    driver: local
  vector_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  finbrief-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16